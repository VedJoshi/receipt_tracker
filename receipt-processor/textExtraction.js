// api/textExtraction.js
const { spawnSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');
const { v4: uuidv4 } = require('uuid');

/**
 * Extract text from receipt image using Python OpenCV and Tesseract
 * This module acts as a bridge between the Node.js Lambda and a Python script
 * that handles the actual CV operations
 * 
 * @param {Buffer} imageBuffer - The image file buffer
 * @returns {Object} Extracted receipt data
 */
const extractTextFromReceipt = async (imageBuffer) => {
    try {
        // Write the image buffer to a temporary file
        const tmpDir = os.tmpdir();
        const imageId = uuidv4();
        const inputImagePath = path.join(tmpDir, `${imageId}-input.jpg`);
        const outputJsonPath = path.join(tmpDir, `${imageId}-output.json`);
        
        fs.writeFileSync(inputImagePath, imageBuffer);
        
        console.log(`Processing image at ${inputImagePath}`);
        
        // Call Python script with image path
        const pythonProcess = spawnSync('python3', [
            path.join(__dirname, 'receipt_processor.py'),
            inputImagePath,
            outputJsonPath
        ]);
        
        // Check for errors in Python execution
        if (pythonProcess.error) {
            console.error('Failed to execute Python script:', pythonProcess.error);
            throw new Error('Failed to process image with Python script');
        }
        
        if (pythonProcess.status !== 0) {
            console.error('Python script error:', pythonProcess.stderr.toString());
            throw new Error(`Python script failed with status ${pythonProcess.status}`);
        }
        
        console.log('Python script output:', pythonProcess.stdout.toString());
        
        // Read the output JSON file
        if (!fs.existsSync(outputJsonPath)) {
            throw new Error('Output file not generated by Python script');
        }
        
        const extractedData = JSON.parse(fs.readFileSync(outputJsonPath, 'utf8'));
        
        // Clean up temporary files
        try {
            fs.unlinkSync(inputImagePath);
            fs.unlinkSync(outputJsonPath);
        } catch (cleanupError) {
            console.warn('Failed to clean up temporary files:', cleanupError);
        }
        
        return extractedData;
    } catch (error) {
        console.error('Error in text extraction:', error);
        // Return a basic result on error
        return {
            full_text: "Error processing receipt",
            store_name: null,
            total_amount: null,
            date: null,
            items: [],
            error: error.message
        };
    }
};

module.exports = { extractTextFromReceipt };